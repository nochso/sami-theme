<?php

/**
 * @copyright Copyright (c) 2015 Marcel Voigt
 */
use Sami\Parser\Filter\FilterInterface;
use Sami\Reflection\ClassReflection;
use Sami\Reflection\MethodReflection;
use Sami\Reflection\PropertyReflection;
use Sami\Sami;
use Symfony\Component\Finder\Finder;


class Minify_Html_TokenParser extends Twig_TokenParser
{
    public function parse(Twig_Token $token)
    {
        $lineno = $token->getLine();
        $this->parser->getStream()->expect(Twig_Token::BLOCK_END_TYPE);
        $body = $this->parser->subparse(array($this, 'decideMinifyHtmlEnd'), true);
        $this->parser->getStream()->expect(Twig_Token::BLOCK_END_TYPE);
        return new Minify_Html_Node(array('body' => $body), array(), $lineno, $this->getTag());
    }

    public function getTag()
    {
        return 'minify_html';
    }

    public function decideMinifyHtmlEnd(Twig_Token $token)
    {
        return $token->test('end_minify_html');
    }
}

class Minify_Html_Node extends Twig_Node
{
    public function __construct(array $nodes = array(), array $attributes = array(), $lineno = 0, $tag = null)
    {
        parent::__construct($nodes, $attributes, $lineno, $tag); // TODO: Change the autogenerated stub
    }

    public function compile(Twig_Compiler $compiler)
    {
        $compiler
            ->addDebugInfo($this)
            ->write("ob_start();\n")
            ->subcompile($this->getNode('body'))
            ->write("echo \WyriHaximus\HtmlCompress\Factory::constructSmallest()->compress(ob_get_clean());\n");
    }
}

$finder = Finder::create()
    ->files()
    ->name('*.php')
//    ->in(__DIR__.'/../vendor')
    ->in(__DIR__.'/../vendor/symfony/finder')
//    ->in(__DIR__.'/../../cmdli/vendor')
//    ->in(__DIR__.'/../vendor/twig')
;

$config = array(
    'theme' => 'nochso',
    'title' => 'Symfony Finder API using nochso/sami theme',
    'build_dir' => __DIR__.'/build',
    'cache_dir' => __DIR__.'/cache',
    'template_dirs' => array(__DIR__.'/..'),
);

$sami = new Sami($finder, $config);
$sami['filter'] = function () {
    return new ProtectedFilter();
};
$fileGetFunction = new Twig_SimpleFunction('file_get_contents', 'file_get_contents');
$sami['twig']->addFunction($fileGetFunction);
$sami['twig']->addTokenParser(new Minify_Html_TokenParser());

class ProtectedFilter implements FilterInterface
{
    public function acceptClass(ClassReflection $class)
    {
        return true;
    }

    public function acceptMethod(MethodReflection $method)
    {
        return $method->isPublic() || $method->isProtected();
    }

    public function acceptProperty(PropertyReflection $property)
    {
        return $property->isPublic() || $property->isProtected();
    }
}

return $sami;
